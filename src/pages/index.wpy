<style>
.btn{
  width:50%;
  position:absolute;
  bottom:200rpx;
  left:200rpx;
}
.rate{
  text-align: center;
  margin: auto;
  position: absolute;
  top: 320rpx;
  left: 0;
  right: 0;
  font-size: 100rpx;
}
.time{
  text-align: center;
  margin: auto;
  margin-top: -70rpx;
  font-weight: bold;
  color: grey;
}
</style>

<template>
  <view>
    <canvas canvas-id="timeRing" style="width:750rpx;height:750rpx;"/>
    <cover-view class="rate">
      {{rate}} %
    </cover-view>
    <view class="time">
      <text style="margin-right:20rpx;">已签到: {{timeSpan}} H</text>
      <text>需签到时间: {{required}} H</text>
    </view>
    <button hidden="{{!canSign}}" @tap="signIn" class="weui-btn btn" plain="true">签到</button>
    <button hidden="{{canSign}}" @tap="signOut" class="weui-btn btn" type="warn" plain="true">签退</button>
  </view>
</template>

<script>
  import wepy from 'wepy'
  import moment from 'moment'
  import InfoMixin from '../mixins/info'
  import { themeColor } from '../config'
  import { checkLocation } from '../utils/util'
  import { drawRing } from '../utils/draw'
  import api from '../utils/api'

  export default class Index extends wepy.page {
    // 混入InfoMixin
    mixins = [ InfoMixin ]

    data = {
      canSign: true,
      required: 0,
      timeSpan: 0
    }

    watch = {
      // 当学号发生变化时，更新状态
      async studentId() {
        await this.refresh()
      },
      // 当状态发生变化时，重新绘制环
      async timeSpan() {
        await this.draw()
      }
    }

    computed = {
      rate() {
        let r = this.timeSpan / this.required
        r = (r || 0) * 100
        return r > 100 ? 100 : Math.ceil(r)
      }
    }

    async onLoad() {
      await this.getInfo()
      await this.refresh()
      await this.draw()
    }
    async onShow() {
      await this.getInfo()
    }

    // 签到
    async signIn() {
      // 判断是否在攀峰工作室
      if (!await checkLocation()) {
        await wepy.showToast({ title: '取消签到', icon: 'none' })
        return
      }

      // 签到
      try {
        await api.signIn(this.studentId, this.name)
        wepy.showToast({ title: '签到成功', mask: true })
      } catch (error) {
        wepy.showModal({
          title: '签到失败',
          content: error,
          showCancel: false,
          confirmColor: themeColor
        })
      }

      // 刷新状态
      this.refresh()
    }

    // 签退
    async signOut() {
      try {
        await api.signOut(this.studentId)
        wepy.showToast({ title: '签退成功', mask: true })
      } catch (error) {
        wepy.showModal({
          title: '签退失败',
          content: error,
          showCancel: false,
          confirmColor: themeColor
        })
      }

      // 刷新状态
      this.refresh()
    }

    // 刷新状态
    async refresh() {
      // TODO: 学号不存在时，会报错
      if (!this.studentId) {
        return
      }
      let res = await api.reportPerson(this.studentId)
      this.required = moment.duration(res.required).asHours().toFixed(2)
      this.timeSpan = moment.duration(res.timeSpan).asHours().toFixed(2)

      let records = await api.query({ studentId: this.studentId })
      this.canSign = records.every(record => record.signOutTime)

      this.$apply()
    }

    async draw() {
      const ctx = wepy.createCanvasContext('timeRing')
      let rate = this.timeSpan / this.required
      await drawRing(ctx, rate || 0)
    }
  }
</script>
