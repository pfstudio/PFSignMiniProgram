<template>
  <view>
      <canvas canvas-id="timeRing" style="width:750rpx;height:750rpx;"/>
      <view class="page__bd_spacing">
          <view class="weui-flex">
              <view class="weui-flex__item" style="position:absolute; top:300rpx;left:280rpx;font-size:80rpx">
          <!-- <view class="placeholder">已签到时长</view> -->
              <text>{{timeSpan}} h</text>
          </view>
          <view class="weui-flex__item" style="position:absolute; top:400rpx;left:400rpx; font-color:#9A9A9A;font-size:50rpx;">
            <!-- <view class="placeholder">要求签到时长</view> -->
            <text>{{required}} h</text>
          </view>                                              
      </view>
    <button hidden="{{!canSign}}" @tap="signIn" class="weui_btn weui_btn_plain_default" plain="true" style="width:50%; position:absolute; top:750rpx;left:200rpx;">签到</button>
    <button hidden="{{canSign}}" @tap="signOut" class="weui-btn" type="warn" plain="true" style="width:50%; position:absolute; top:750rpx;left:200rpx;">签退</button>
  </view>
</view>
</view>
</template>
<script>
  import wepy from 'wepy'
  import moment from 'moment'
  import { themeColor } from '../config'
  import { checkLocation } from '../utils/util'
  import { drawRing } from '../utils/draw'
  import api from '../utils/api'

  export default class Sign extends wepy.component {
    props = {
      studentId: String,
      name: String
    }

    data = {
      studentId: '',
      name: '',
      canSign: true,
      required: 0,
      timeSpan: 0
    }

    methods = {
      signIn: this.signIn,
      signOut: this.signOut
    }

    watch = {
      // 当学号发生变化时，更新状态
      async studentId() {
        await this.refresh()
      },
      // 当状态发生变化时，重新绘制环
      async timeSpan() {
        await this.draw()
      }
    }

    async onLoad() {
      await this.refresh()
      await this.draw()
    }

    // 签到
    async signIn() {
      // 判断是否在攀峰工作室
      if (!await checkLocation()) {
        await wepy.showToast({ title: '取消签到', icon: 'none' })
        return
      }

      // 签到
      try {
        await api.signIn(this.studentId, this.name)
        wepy.showToast({ title: '签到成功', mask: true })
      } catch (error) {
        wepy.showModal({
          title: '签到失败',
          content: error,
          showCancel: false,
          confirmColor: themeColor
        })
      }

      // 刷新状态
      this.refresh()
    }

    // 签退
    async signOut() {
      try {
        await api.signOut(this.studentId)
        wepy.showToast({ title: '签退成功', mask: true })
      } catch (error) {
        wepy.showModal({
          title: '签退失败',
          content: error,
          showCancel: false,
          confirmColor: themeColor
        })
      }

      // 刷新状态
      this.refresh()
    }

    // 刷新状态
    async refresh() {
      // TODO: 学号不存在时，会报错
      if (!this.studentId) {
        return
      }
      let res = await api.reportPerson(this.studentId)
      this.required = moment.duration(res.required).asHours().toFixed(2)
      this.timeSpan = moment.duration(res.timeSpan).asHours().toFixed(2)

      let records = await api.query({ studentId: this.studentId })
      this.canSign = records.every(record => record.signOutTime)

      this.$apply()
    }

    async draw() {
      const ctx = wepy.createCanvasContext('timeRing')
      let rate = this.timeSpan / this.required
      await drawRing(ctx, rate || 0)
    }
  }
</script>
